Instructions for the compilation of usage of code for Roberts et al. (2016), Correlation confidence limits for unevenly sampled data, Computers & Geosciences

Compilation (fortran source code version only)
===========
Single CPU version of the code can be compiled to produce the executable "correlation_serial" by the following commands for either the Intel, GNU or PGI fortran compilers from the fortran directory

Intel
-----
ifort -o correlation_serial correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -O3

GNU
---
gfortran -o correlation_serial correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -O3

PGI
---
pgf90 -o correlation_serial correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -O3

OpenMP multiple CPU version called "correlation" can be generated by the following commands for either the Intel, GNU or PGI fortran compilers from the fortran directory

Intel
-----
ifort -o correlation correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -openmp -O3

GNU
---
gfortran -o correlation correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -fopenmp -O3

PGI
---
pgf90 -o correlation correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -O3 -mp

OpenACC multiple accelerator version called "correlation_openacc" can be generated by the following command for the PGI fortran compiler from the fortran/OpenACC directory

PGI
---
pgf90 -o correlation_openacc correlation_gaussian.f90 correlation_bootstrap.f90 correlation.f90 -O3 -acc

USAGE
=====
Fortran and windows versions
----------------------------
Run the code as per your operating system (for *unix operating systems
type ./correlation or ./correlation_serial or ./correlation_openacc
depending on what version of the code you compiled, for windows double
click on correlation_serial.exe file).  For OpenMP parallised code, changing
the environmental variable OMP_NUM_THREADS will control how many CPU's are
used for the calcualtion (eg in c-shell type "setenv OMP_NUM_THREADS 4"
to use 4 CPU's).

The program will then prompt you for the names of the two input data
series.  For the example provided these names are "example_1.txt" and
"example_2.txt".  After some time several miniutes or several tens of
minutes for MATLAB version (depending on hardware) you should see a result
like 0.5674844     [  0.4760814     :  0.7659165     ] which in this
case indicates a correlation of 0.567 and 95% confidene limits of 0.476
to 0.766.  The actual values for the confidence limit are dependant on
the sequence of numbers generated by the pseudo random number generator,
and will therefore differ slightly.

MATLAB
------
The MATLAB version provides two function calls to calculate the correlation and the confidence interval, namely "correlate_gaussian" and "bootstrap_ci", respectively.

To run the example case, load the data into 4 vectors "tx", "x", "ty" and "y", containing the time for the x data, the x data, the time for y data, and the y data respectively, using commands such as

d1=dlmread("example_1.txt");
d2=dlmread("example_2.txt");
tx=d1(:,1);
x=d1(:,2);
ty=d2(:,1);
y=d2(:,2);

Then calculate the correlation using
corr=correlate_gaussian(x,y,tx,ty)
to get the answer corr =  0.56750

and the confidence interval using 
[bci1, bci2] = bootstrap_ci(x, y, tx, ty)
to get the confidence interval of 
bci1 =  0.48118
bci2 =  0.76228




